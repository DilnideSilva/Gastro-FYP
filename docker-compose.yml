version: '3.8'

services:
  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - spring-boot-service
      - python-service
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
    environment:
      - API_BASE_URL=http://localhost:8080
      - AI_SERVICE_URL=http://localhost:5000

  # Spring Boot Service
  spring-boot-service:
    build:
      context: ./backend/spring-boot-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - GOOGLE_APPLICATION_CREDENTIALS=/app/firebase-service-account.json
      - GOOGLE_CLOUD_PROJECT_ID=${GOOGLE_CLOUD_PROJECT_ID}
      - PYTHON_SERVICE_URL=http://python-service:5000
    volumes:
      - ./backend/spring-boot-service/firebase-service-account.json:/app/firebase-service-account.json:ro
    depends_on:
      - python-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Python AI Service
  python-service:
    build:
      context: ./backend/python-service
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - GOOGLE_APPLICATION_CREDENTIALS=/app/service-account-key.json
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT_ID}
      - VERTEX_AI_PROJECT_ID=${GOOGLE_CLOUD_PROJECT_ID}
      - VERTEX_AI_LOCATION=${VERTEX_AI_LOCATION}
    volumes:
      - ./backend/python-service/service-account-key.json:/app/service-account-key.json:ro
      - ./data:/app/data:ro
      - ./ml-models:/app/models:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  # Nginx for load balancing (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - spring-boot-service
      - python-service

volumes:
  redis_data:

networks:
  default:
    name: gastrosphere-network
